<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>matplotlib学习笔记</title>
      <link href="2021/070124.html"/>
      <url>2021/070124.html</url>
      
        <content type="html"><![CDATA[<h1 id="matplotlib学习笔记"><a href="#matplotlib学习笔记" class="headerlink" title="matplotlib学习笔记"></a>matplotlib学习笔记</h1><h1 id="one-day："><a href="#one-day：" class="headerlink" title="one day："></a>one day：</h1><h3 id="库："><a href="#库：" class="headerlink" title="库："></a>库：</h3><ol><li>pandas</li><li>numpy</li><li>matplotlib</li></ol><h3 id="数据分析流程："><a href="#数据分析流程：" class="headerlink" title="数据分析流程："></a>数据分析流程：</h3><ol><li>提出问题</li><li>准备数据</li><li>分析数据</li><li>得出结论</li><li>成果可视化</li></ol><hr><h2 id="学习模块："><a href="#学习模块：" class="headerlink" title="学习模块："></a>学习模块：</h2><h3 id="matplotlib库"><a href="#matplotlib库" class="headerlink" title="matplotlib库:"></a>matplotlib库:</h3><h4 id="为什么要学习matplotlib"><a href="#为什么要学习matplotlib" class="headerlink" title="为什么要学习matplotlib"></a>为什么要学习matplotlib</h4><p>1.能讲数据进行可视化，更加直观的呈现<br>2.是数据更加客观，更具说服力</p><p>matplotlib模仿matlab构建，主要用于数据可视化图表</p><h4 id="pyplot模块："><a href="#pyplot模块：" class="headerlink" title="pyplot模块："></a>pyplot模块：</h4><p>常用导入形式：</p><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as plt</code></pre><h4 id="模块部分功能："><a href="#模块部分功能：" class="headerlink" title="模块部分功能："></a>模块部分功能：</h4><ol><li>绘制图片</li><li>设置图片大小</li><li>保存本地</li><li>描述信息</li><li>调整坐标轴间距</li><li>线条样式</li><li>标记特殊的点</li><li>添加水印</li></ol><h5 id="绘制图片："><a href="#绘制图片：" class="headerlink" title="绘制图片："></a>绘制图片：</h5><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as pltplt.plot(x,y)plt.show()</code></pre><p>plt.plot()函数中的参数与matlab中plot的参数类似</p><p>plt.plot(x轴数据,y轴数据,样式与颜色)</p><h5 id="设置图片大小："><a href="#设置图片大小：" class="headerlink" title="设置图片大小："></a>设置图片大小：</h5><p>例子：</p><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as pltx=range(2,26,2)y=[15,13,14,17,20,25,26,26,24,22,18,15]fig = plt.figure(figsize=(20,8),dpi=80)# figure是对于plot的全局属性，定义一次之后后续都会变化# figure设置图形属性 # figsize设置图片大小 此处参数含义：高=20 宽=8# dpi 每英寸上点的个数 与图片清晰度有关，越高越清晰# 绘图plt.plot(x,y)# 展示图片plt.show()</code></pre><h4 id="保存："><a href="#保存：" class="headerlink" title="保存："></a>保存：</h4><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as pltx=range(2,26,2)y=[15,13,14,17,20,25,26,26,24,22,18,15]fig = plt.figure(figsize=(20,8),dpi=80)# figure是对于plot的全局属性，定义一次之后后续都会变化# figure设置图形属性 # figsize设置图片大小 此处参数含义：高=20 宽=8# dpi 每英寸上点的个数 与图片清晰度有关，越高越清晰#保存plt.savefig('./p1.png') #pit.saverfig(地址) png->位图 svg->矢量图(放缩不会失帧)# 绘图plt.plot(x,y)# 展示图片plt.show()</code></pre><h4 id="调整坐标轴间距："><a href="#调整坐标轴间距：" class="headerlink" title="调整坐标轴间距："></a>调整坐标轴间距：</h4><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as plt# 设坐标轴刻度x=list(range(1,121))y=[random.randint(20,35) for i in range(120)]# 坐标轴为数字# plt.xticks(x) _xtick_labels=[f"10点&#123;i&#125;" for i in range(60)]_xtick_labels += [f"11点&#123;i&#125;" for i in range(60)]# 坐标轴数据为字符串或非数值# plt.xticks(x,_xtick_labels) #要求x个数与_xtick_labels相对应# 坐标轴数据显示角度plt.xticks(x,_xtick_labels,rotation=90) #retation旋转角度plt.plot(x,y)plt.show()</code></pre><p><strong>注</strong>：若数据间隔太小可以用列表切片的方法处理</p><p><strong>注</strong>：<br>    matplotlib默认不支持中文显示</p><pre><code>要想显示汉字，可以调用matplotlib.rc修改其源码注释：font rc as follows::  font = &#123;&#39;family&#39; : &#39;monospace&#39;,          &#39;weight&#39; : &#39;bold&#39;,          &#39;size&#39;   : &#39;larger&#39;&#125;  rc(&#39;font&#39;, **font)  # pass in the font dict as kwargs</code></pre><p><strong>或</strong>：</p><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as pltfrom matplotlib import font_managerimport randommy_flont=font_manager.FontProperties(fname=r'C:\Windows\Fonts\simhei.ttf') #fname='字体地址'  windows字体一般在C:\Windows\Fonts\文件夹下  #设坐标轴刻度x=list(range(1,121))y=[random.randint(20,35) for i in range(120)]#坐标轴为数字# plt.xticks(x) plt.figure(figsize=(15,6),dpi=80)_xtick_labels=[f"10点&#123;i&#125;" for i in range(60)]_xtick_labels += [f"11点&#123;i&#125;" for i in range(60)]#坐标轴数据为字符串或非数值# plt.xticks(x,_xtick_labels) #要求x个数与_xtick_labels相对应# 坐标轴数据显示角度plt.xticks(x[::3],_xtick_labels[::3],rotation=45,fontproperties=my_flont) # retation旋转角度# fontproperties设置字体plt.plot(x,y)plt.show()</code></pre><hr><h5 id="坐标轴注释"><a href="#坐标轴注释" class="headerlink" title="坐标轴注释"></a>坐标轴注释</h5><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as pltfrom matplotlib import font_managerimport randommy_flont=font_manager.FontProperties(fname=r'C:\Windows\Fonts\simhei.ttf') #fname='字体地址'  windows字体一般在C:\Windows\Fonts\文件夹下  #设坐标轴刻度x=list(range(1,121))y=[random.randint(20,35) for i in range(120)]#坐标轴为数字# plt.xticks(x) plt.figure(figsize=(15,6),dpi=80)_xtick_labels=[f"10点&#123;i&#125;" for i in range(60)]_xtick_labels += [f"11点&#123;i&#125;" for i in range(60)]#坐标轴数据为字符串或非数值# plt.xticks(x,_xtick_labels) #要求x个数与_xtick_labels相对应plt.plot(x,y)# 坐标轴数据显示角度plt.xticks(x[::3],_xtick_labels[::3],rotation=45,fontproperties=my_flont) # retation旋转角度# fontproperties设置字体plt.xlabel("时间：",fontproperties=my_flont)plt.ylabel("温度 单位：(℃)",fontproperties=my_flont)plt.title("某天十点到十二点气温",fontproperties=my_flont)plt.show()</code></pre><h5 id="线条注释："><a href="#线条注释：" class="headerlink" title="线条注释："></a>线条注释：</h5><p>plt.plot(x,y,label=’str’) </p><p>label线条注释</p><p>需要通过<br>plt.legend()来显示</p><p>plt.legend(prop=) 设置语言</p><p><strong>注</strong>：除了plt.legend之外其他设置语言都是用fontproperties</p><pre class=" language-py"><code class="language-py">#导入模块from matplotlib import pyplot as pltfrom matplotlib import font_manager#导入中文格式my_font=font_manager.FontProperties(fname=r'C:\Windows\Fonts\simhei.ttf')#导入数据a=[1,0,1,1,2,4,3,2,3,4,4,5,6,5,4,3,3,1,1,1]b=[1,0,3,1,2,2,3,3,2,1,2,1,1,1,1,1,1,1,1,1]#设置绘图属性plt.figure(figsize=(15,6),dpi=80)#绘制图形plt.plot(range(11,31),a,label='A同学') #label 线条注释 需要通过plt.legend才能显示plt.plot(range(11,31),b,label='B同学') #label 线条注释 需要通过plt.legend才能显示_x=list(range(11,31))_x_ticks=[f'&#123;i&#125;岁' for i in range(11,31)]#x轴注释plt.xticks(_x[::3],_x_ticks[::3],fontproperties=my_font)plt.xlabel("年龄:",fontproperties=my_font)plt.ylabel("个数:",fontproperties=my_font)plt.legend(prop=my_font) #设置中文的时候不再是fontproperties 而是propplt.grid(alpha=0.4,loc='unpper left') #显示位置：  #  'best':0 (自动显示位置)#  'unpper right':1#  'unpper left':2#  'lower left':3#  'lower right':4#  'right':5#  'center left':6#  'center right':7#  'lower center':8#  'unpper center':9#  'center':10#   plt.xlabel()也有loc参数，使用方法和plt.grid()类似plt.show()</code></pre><h5 id="绘制网格"><a href="#绘制网格" class="headerlink" title="绘制网格"></a>绘制网格</h5><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as pltplt.grid(b, which, axis, color, linestyle, linewidth,alpha， **kwargs)</code></pre><pre><code>    b : 布尔值。就是是否显示网格线的意思    axis : 取值为‘both’， ‘x’，‘y’。就是以什么轴为刻度生成网格。例如我输入参数x就会在x轴方向上生成纵向的网格刻度。没有输入的方向则不会显示网格刻度。    color:颜色    linestyle :也可以用ls来代替linestyle， 设置网格线的风格，是连续实线，虚线或者其它不同的线条。 | &#39;-&#39; | &#39;--&#39;     linewidth : 设置网格线的宽度    alpha:网格透明度</code></pre><hr><h2 id="绘制条形图"><a href="#绘制条形图" class="headerlink" title="绘制条形图"></a>绘制条形图</h2><p>竖着的条形图：</p><p>plt.bar(x,y,width)</p><p>width线条宽度</p><p>横着的条形图：</p><p>plt.barh(y,width,height)</p><p>height 线条宽度</p><h3 id="多条条形图绘制方法："><a href="#多条条形图绘制方法：" class="headerlink" title="多条条形图绘制方法："></a>多条条形图绘制方法：</h3><pre class=" language-py"><code class="language-py">from matplotlib import pyplot as pltfrom matplotlib import font_managera=['猩球崛起','敦刻尔克','蜘蛛侠','战狼2']b_16=[15748,312,4497,319]b_15=[12357,156,2045,168]b_14=[2358,399,2358,362]x_14=list(range(len(a)))x_15=[i+0.2 for i in x_14] #0.2是宽度x_16=[i+0.2*2 for i in x_14]plt.bar(x_14,b_14,width=0.2)plt.bar(x_15,b_15,width=0.2)plt.bar(x_16,b_16,width=0.2)plt.xticks(x_15,a)plt.grid(linewidth=0.25)plt.show()</code></pre><h2 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h2><p>绘制直方图的条件：</p><ol><li>数据是原始数据</li><li>给的数据为统计过的数据可以用没有间隔的直方图来体现直方图的效果</li></ol><p>组数=极差/组距=(max(a)-min(a))/bin_width(最好选的bin_width是max(a)-min(b)的公因子)</p><pre><code>    from matplotlib import pyplot as plt    num_bins=(max(a)-min(a))//bin_width    plt.hist(数据,组数)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas库学习笔记</title>
      <link href="2021/070125.html"/>
      <url>2021/070125.html</url>
      
        <content type="html"><![CDATA[<h1 id="pandas库学习笔记"><a href="#pandas库学习笔记" class="headerlink" title="pandas库学习笔记"></a>pandas库学习笔记</h1><h2 id="Series-DataFrame"><a href="#Series-DataFrame" class="headerlink" title="Series,DataFrame"></a>Series,DataFrame</h2><p>Series 一种数据结构 由引索和数据组成 类似一维矩阵 </p><p>Series就像将索引值暴露在外面的List，其实它们除了外表相似以外，在获取数据方面也非常的相似。可以通过索引值来进行单个数据的访问，同样也支持切片选择多个数据。</p><h3 id="Series常见操作："><a href="#Series常见操作：" class="headerlink" title="Series常见操作："></a>Series常见操作：</h3><pre class=" language-py"><code class="language-py">from pandas import Seriesemp=['001','002','003','004','005','006']name=['亚瑟', '后裔','小乔','哪吒' ,'虞姬','王昭君']series = Series(data=name,index=emp)# 获取数据的值print(series.values)# 获取索引的值print(series.index.tolist())# 获取每对索引和值print(list(series.items()))</code></pre><p>运行结果：<br>    [‘亚瑟’ ‘后裔’ ‘小乔’ ‘哪吒’ ‘虞姬’ ‘王昭君’]<br>    [‘001’, ‘002’, ‘003’, ‘004’, ‘005’, ‘006’]<br>    [(‘001’, ‘亚瑟’), (‘002’, ‘后裔’), (‘003’, ‘小乔’), (‘004’, ‘哪吒’), (‘005’, ‘虞姬’), (‘006’, ‘王昭君’)]</p><pre><code>values、index、items返回的对象分别是List、Index、Zip类型的数据</code></pre><h4 id="切片："><a href="#切片：" class="headerlink" title="切片："></a>切片：</h4><pre class=" language-py"><code class="language-py">from pandas import Seriesemp=['001','002','003','004','005','006']name=['亚瑟', '后裔','小乔','哪吒' ,'虞姬','王昭君']series = Series(data=name,index=emp)# 使用索引值获取单个数据print(series['001'])# 使用索引值获取多个不连续的数据print('索引下标',series[['002','004']])# 使用切片获取连续的数据print('索引切片',series['001':'004'])</code></pre><pre><code># 获取数据格式—对象名[]# 获取多个不连续数据时是双层括号— 对象名[[]]# 使用切片时使用的是:自定的index值被叫做索引下标，没有设置index值时会有一个默认的值叫做位置下标。索引下标不会覆盖默认的位置下标，即仍能用操作list的方法操纵Series</code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre class=" language-py"><code class="language-py">    #遍历值    for value in series:        print(value)    #遍历index    for value in series.keys():        print(value)    #遍历索引和值    for value in series.items():        print(value)</code></pre><h3 id="DataFrame："><a href="#DataFrame：" class="headerlink" title="DataFrame："></a>DataFrame：</h3><p>DateFram 将字典或者列表转化成一个类似矩阵的操作</p><h4 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h4><pre class=" language-py"><code class="language-py">import pandas as pddf_dict = &#123;    'name':['ZhangSan','LiSi','WangWu','ZhaoLiu'],    'age':['18','20','19','22'],    'weight':['50','55','60','80']&#125;df = pd.DataFrame(data=df_dict,index=['001','002','003','004'])print(df)# 获取行数和列数print(df.shape)# 获取行索引print(df.index.tolist())# 获取列索引print(df.columns.tolist())# 获取数据的维度print(df.ndim)</code></pre><pre class=" language-py"><code class="language-py"># 获取前两条df.head(2)# 获取后两条df.tail(2)</code></pre><p><strong>注</strong>：两个方法都有默认值，默认值是5，当然也可以自己设置，如果数据不够5个会将全部数据拿出来。</p><pre class=" language-py"><code class="language-py">import pandas as pddf_dict = &#123;    'name':['ZhangSan','LiSi','WangWu','ZhaoLiu'],    'age':['18','20','19','22'],    'weight':['50','55','60','80']&#125;df = pd.DataFrame(data=df_dict,index=['001','002','003','004'])print(df[::2][['name','age']])# 通过位置索引切片获取一行print(df[0:1])# 通过位置索引切片获取多行print(df[1:3])# 获取多行里面的某几列print(df[1:3][['name','age']])# 获取DataFrame的列print(df['name'])# 如果获取多个列print(df[['name','age']])</code></pre><pre><code># df[]不支持直接输入标签索引获取行数据，例如：df[&#39;001&#39;]# 这种方式可以获取一列数据，列如：df[&#39;name&#39;]# 如果想获取多行里面的某几列可写成：df[行][列]，例如：df[1:3][[&#39;name&#39;,&#39;age&#39;]],将列索引值放到同一个列表中，再将列表放到第二个方括号中</code></pre><p>要想通过直接输入标签索引获取行数据可用签索引筛选loc[]</p><pre class=" language-py"><code class="language-py">import pandas as pddf_dict = &#123;    'name':['ZhangSan','LiSi','WangWu','ZhaoLiu'],    'age':['18','20','19','22'],    'weight':['50','55','60','80']&#125;df = pd.DataFrame(data=df_dict,index=['001','002','003','004'])print(df)# 获取某一行某一列的数据print(df.loc['001','name'])# 某一行多列的数据print(df.loc['001',['name','weight']])# 一行所有列print(df.loc['001',:])# 选择间隔的多行多列print(df.loc[['001','003'],['name','weight']])# 选择连续的多行和间隔的多列print(df.loc['001':'003','name':'weight'])</code></pre><p>df.loc[] 通过标签索引获取行数据，它的语法结构是这样的：df.loc[[行],[列]]，方括号中用逗号分隔，左侧是行、右侧是列。千万注意：<strong>如果行或者列使用切片的时候，要把方括号去掉</strong>，列df.loc[‘001’:’003’,’name’:’weight’]。</p><p>df.iloc[] 通过位置索引获取行数据，操作和loc[]操作是一样</p><pre class=" language-py"><code class="language-py">import pandas as pddf_dict = &#123;    'name':['ZhangSan','LiSi','WangWu','ZhaoLiu'],    'age':['18','20','19','22'],    'weight':['50','55','60','80']&#125;df = pd.DataFrame(data=df_dict,index=['001','002','003','004'])print(df)# 取连续多行print(df.iloc[0:2])# 取间断的多行print(df.iloc[[0,2],:])# 取某一列print(df.iloc[:,1])# 某一个值print(df.iloc[1,0])</code></pre><p><strong>注</strong>:loc和iloc的切片操作在是否包含切片终点的数据有差异。loc[‘001’:’003’]的结果中包含行索引003对应的行。iloc[0:2] 结果中不包含序号为2的数据，切片终点对应的数据不在筛选结果中。</p><h3 id="DataFrame的遍历："><a href="#DataFrame的遍历：" class="headerlink" title="DataFrame的遍历："></a>DataFrame的遍历：</h3><p>iterrows(): 按行遍历，将DataFrame的每一行转化为(index, Series)对。index为行索引值，Series为该行对应的数据。</p><p>iteritems():按列遍历，将DataFrame的每一列转化为(column, Series)对。column为列索引的值，Series为该列对应的数据。</p><pre class=" language-py"><code class="language-py">import pandas as pddf_dict = &#123;    'name':['ZhangSan','LiSi','WangWu','ZhaoLiu'],    'age':['18','20','19','22'],    'weight':['50','55','60','80']&#125;df = pd.DataFrame(data=df_dict,index=['001','002','003','004'])for index,row_data in df.iterrows():    print(index,row_data)print('-'*10)for col,col_data in df.iteritems():    print(col)</code></pre><p>运行结果：</p><pre><code>001 name      ZhangSanage             18weight          50Name: 001, dtype: object002 name      LiSiage         20weight      55Name: 002, dtype: object003 name      WangWuage           19weight        60Name: 003, dtype: object004 name      ZhaoLiuage            22weight         80Name: 004, dtype: object----------nameageweight</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python excel 学习笔记</title>
      <link href="2021/070122.html"/>
      <url>2021/070122.html</url>
      
        <content type="html"><![CDATA[<h1 id="excel-学习笔记"><a href="#excel-学习笔记" class="headerlink" title="excel 学习笔记"></a>excel 学习笔记</h1><h2 id="openpyxl库"><a href="#openpyxl库" class="headerlink" title="openpyxl库"></a>openpyxl库</h2><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>win+R 输入cmd进入指令窗口pip install openpyxl</p><h3 id="文件读写："><a href="#文件读写：" class="headerlink" title="文件读写："></a>文件读写：</h3><ol><li> load_workbook(‘address’) 打开文件</li><li> ws=wb.active 获取当前工作簿</li><li> ws=wb[‘Sheet_name’] 获取指定名称的工作簿</li><li> .value 将cell类型提取出value</li><li> .row 行 .rows每行 .column 列 .columns每列</li><li> .create_sheet(‘Sheet_name’) 在文件中新建一个工作簿</li><li> .append()添加到excel表格中 <strong>注</strong>：添加的类型必须是value，不能是cell</li></ol><h4 id="一些例子："><a href="#一些例子：" class="headerlink" title="一些例子："></a>一些例子：</h4><p>要求：<br>将数据分离：</p><pre class=" language-py"><code class="language-py">from openpyxl import load_workbookwb=load_wokbook('all_videl.xlsx')ws=wb.activedata1=[]#大于300data2=[]#小于300for row in ws.rows: #row类型是一行的cell    num=row[3].value    if num>=300:        data1.append(row) #data1里面的元素类型是一行的cell        pass    else:        data2.append(row)        passdata1_ws=wb.create_sheet('大于300')data1_ws=wb.create_sheet('小于300')for d in data1: #d的类型是一行的cell    tmp_data1=[]    for tmp in d:  #tmp的类型是一个单元格的cell        tmp_data1.append(tmp.value)    data1_ws.append(tmp_data1)for d in data2: #d的类型是一行的cell    tmp_data2=[]    for tmp in d:  #tmp的类型是一个单元格的cell        tmp_data2.append(tmp.value)    data2_ws.append(tmp_data2)</code></pre><h4 id="打开多个文件"><a href="#打开多个文件" class="headerlink" title="打开多个文件:"></a>打开多个文件:</h4><pre class=" language-py"><code class="language-py">from openpyxl import load_workbookimport os# 设置文件夹路径path = './各部门利润表汇总/'# 返回当前目录下所有文件名files = os.listdir(path)# 循环文件名列表for file in files:        # 拼接文件路径        file_path = path + file        # 打开工作簿        wb = load_workbook(file_path)        # 打开工作表    </code></pre><hr><h3 id="文件美化："><a href="#文件美化：" class="headerlink" title="文件美化："></a>文件美化：</h3><h4 id="模块："><a href="#模块：" class="headerlink" title="模块："></a>模块：</h4><pre class=" language-py"><code class="language-py">from openpyxl import load_workbook, Workbook from openpyxl.styles import PatternFill, Alignment, Side, Border, Font import os</code></pre><h5 id="模块解释："><a href="#模块解释：" class="headerlink" title="模块解释："></a>模块解释：</h5><h6 id="1-Font类"><a href="#1-Font类" class="headerlink" title="1.Font类"></a>1.Font类</h6><pre><code>Font()类用于设置单元格内的字体样式与大小。语法：Font(name, size, bold, italic)name参数需要传入一个字符串，即字体名称。注： 如果是中文字体，前面必须加 u 对其进行 Unicode 编码。size参数需要传入一个整型，即字体大小。bold参数需要传入一个布尔值，即True/False，是否为粗体。italic参数需要传入一个布尔值，即True/False，是否为斜体。</code></pre><h6 id="2-PatternFill-类"><a href="#2-PatternFill-类" class="headerlink" title="2.PatternFill()类"></a>2.PatternFill()类</h6><pre><code>PatternFill()类是对表格颜色的一个填充。语法：PatternFill(patternType=&#39;&#39;, fgColor=&#39;&#39;)patternType参数表示填充形式，一般为&#39;solid&#39;纯色填充fgColor参数需要传入一个十六进制的颜色码。</code></pre><h6 id="3-Alignment-类："><a href="#3-Alignment-类：" class="headerlink" title="3.Alignment()类："></a>3.Alignment()类：</h6><pre><code>要实现自动换行及字符串对齐方式修改，可以使用styles模块中的Alignment()来先设定好对齐方式，然后应用到指定的cell上。语法：Alignment(horizontal=&#39;&#39;, vertical=&#39;&#39;)horizontal代表水平方向，可以左对齐left，还有居中center和右对齐right，等等。vertical代表垂直方向，可以居中center，还可以靠上top，靠下bottom，等等</code></pre><h6 id="4-Border-类与Side-类："><a href="#4-Border-类与Side-类：" class="headerlink" title="4.Border()类与Side()类："></a>4.Border()类与Side()类：</h6><pre><code>Border()方法可以给单元格设置边框，可以同时设置上下左右四个方向。而设置的样式则需要通过Side()方法来进行。语法：Border(top=Side(style= , color= ) , bottom=Side(style= , color= ) , left=Side(style= , color= ) , right=Side(style= , color= ))style参数需要加入样式类型：thin（细条）、medium（中等）、double（双重）等等。color参数需要加入十六进制颜色码</code></pre><h4 id="常用指令："><a href="#常用指令：" class="headerlink" title="常用指令："></a>常用指令：</h4><ol><li>Sheet.column_dimensions[‘列位置’].width=x。 改变指定列的宽度   </li></ol><p><strong>注</strong>：原本工作表中的列宽，基本上都为 8 个单位</p><ol start="2"><li>PatternFill 对象表示填充，可以用于填充颜色。所以第 6、8、10 三行代码分别定义了 3 种颜色样式；</li><li>Alignment 对象表示对齐方式，所以第 13 行代码定义了 1 种对齐样式；</li><li>Border 对象表示边框，所以第 18、20 行代码分别定义了 2 种边框样式；</li><li>Side 对象是作为 Border 对象的参数值，它的作用是定义边样式。</li></ol><h4 id="参考样例："><a href="#参考样例：" class="headerlink" title="参考样例："></a>参考样例：</h4><pre class=" language-py"><code class="language-py">import osfrom openpyxl import load_workbookfrom openpyxl.styles import PatternFill, Alignment, Side, Border# 定义表头颜色样式为湖蓝色header_fill = PatternFill('solid', fgColor='94B3DE')# 定义表中颜色样式为沙棕绿content_fill = PatternFill('solid', fgColor='DAE2C0')# 定义表尾颜色样式为亮蓝色bottom_fill = PatternFill('solid', fgColor='C8D8EF')# 定义对齐样式横向居中、纵向居中align = Alignment(horizontal='center', vertical='center')# 定义边样式为细条side = Side('thin')# 定义表头边框样式，有底边和右边header_border = Border(bottom=side, right=side)# 定义表中、表尾边框样式，有左边content_border = Border(left=side)# 设置文件夹路径path = '/data/course_data/Python小课文件/office_automation/各部门利润表汇总/'# 返回当前目录下所有文件名files = os.listdir(path)# 循环文件名列表for file in files:    # 拼接文件路径    file_path = path + file    # 打开工作簿    wb = load_workbook(file_path)    # 打开工作表    ws = wb.active    # 调整列宽    ws.column_dimensions['A'].width = 10    ws.column_dimensions['B'].width = 25    ws.column_dimensions['C'].width = 50    ws.column_dimensions['D'].width = 10    ws.column_dimensions['E'].width = 20    ws.column_dimensions['F'].width = 15    # 循环第一行单元格，调整表头样式    for cell in ws[1]:        # 设置单元格填充颜色        cell.fill = header_fill        # 设置单元格对齐方式        cell.alignment = align        # 设置单元格边框        cell.border = header_border    # 获取最后一行行号    row_num = ws.max_row    # 从第二行开始，循环到倒数第二行    for row in ws.iter_rows(min_row=2, max_row=(row_num-1)):        # 循环取出单元格，调整表中样式        for cell in row:            cell.fill = content_fill            cell.alignment = align            cell.border = content_border    # 循环最后一行单元格，调整表尾样式    for cell in ws[row_num]:        cell.fill = bottom_fill        cell.alignment = align        cell.border = content_border    # 保存    wb.save(file_path)</code></pre><h4 id="单元格常见用法"><a href="#单元格常见用法" class="headerlink" title="单元格常见用法:"></a>单元格常见用法:</h4><ol><li>cell.value：获取单元格内的值</li><li>cell.font：设置单元格内的字体样式</li><li>cell.fill：设置单元格内的填充颜色</li><li>cell.alignment：设置单元格内的对齐方式</li><li>cell.border：设置单元格内的边框样式</li></ol><h4 id="其他函数："><a href="#其他函数：" class="headerlink" title="其他函数："></a>其他函数：</h4><ol><li>ws.max_row：<pre class=" language-py"><code class="language-py">row_num = ws.max_row     # 获取最后一行行号column_num = ws.max_column    # 获取最后一列列号row_num_2 = ws.max_row - 1     # 获取倒数第2行行号</code></pre></li><li>ws.iter_rows(min_row= ,max_row= ,min_col= ,max_col= ,values_only= )</li></ol><p>min_row 最小列序号</p><p>max_row 最大列序号</p><p>min_col 最小行序号</p><p>max_col 最大行序号</p><p>values_only 是否返回value值</p><pre class=" language-py"><code class="language-py"># 遍历从第2行开始的每行内容，values_only=True可以直接获取单元格的值for row in ws.iter_rows(min_row=2, values_only=True):    # 遍历每一行内的单元格    for r in row:        print(r)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解(2)</title>
      <link href="2021/041623.html"/>
      <url>2021/041623.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-数列排序"><a href="#1-数列排序" class="headerlink" title="1.数列排序"></a>1.数列排序</h2><h3 id="题目概述："><a href="#题目概述：" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>给定一个长度为n的数列，将这个数列按从小到大的顺序排列。</p><p>1&lt;=n&lt;=200</p><p>输入格式</p><p>　　<br>第一行为一个整数n。　</p><p>第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p><p>输出格式<br>　　<br>输出一行，按从小到大的顺序输出排序后的数列。</p><p>样例输入</p><p>5</p><p>8 3 6 4 9</p><p>样例输出</p><p>3 4 6 8 9</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>基本思想：：参见排序算法专栏</p><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    clock_t start<span class="token punctuation">,</span> finish<span class="token punctuation">;</span>    <span class="token keyword">double</span> Total_time<span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机数组</span>    <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right <span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计时开始</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    finish <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计时结束</span>    Total_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>finish <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f seconds\n"</span><span class="token punctuation">,</span> Total_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//快速排序</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> base<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>        i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>        base <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//取最左边的数为基准数</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> base <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基准数归位</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归左边</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归右边</span></code></pre><h4 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h4><p>基本思想：：参见排序算法专栏</p><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>v<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    clock_t start<span class="token punctuation">,</span> finish<span class="token punctuation">;</span>    <span class="token keyword">double</span> Total_time<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成随机数组</span>        start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始记时</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                v<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span>                    flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//冒泡排序</span>        finish <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计时结束；</span>    Total_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>finish <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f seconds\n"</span><span class="token punctuation">,</span> Total_time<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="2-十六进制转十进制"><a href="#2-十六进制转十进制" class="headerlink" title="2.十六进制转十进制"></a>2.十六进制转十进制</h2><h3 id="题目概述：-1"><a href="#题目概述：-1" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>　　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。</p><p>　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p><p>样例输入</p><p>FFFF</p><p>样例输出</p><p>65535</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             sum<span class="token operator">*</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>            sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'A'</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'F'</span><span class="token punctuation">)</span>            sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="3-十进制转十六进制"><a href="#3-十进制转十六进制" class="headerlink" title="3.十进制转十六进制"></a>3.十进制转十六进制</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>问题描述</p><p>　　十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。</p><p>　　给出一个非负整数，将它表示成十六进制的形式。</p><p>输入格式</p><p>　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647</p><p>输出格式</p><p>　　输出这个整数的16进制表示</p><p>样例输入</p><p>30</p><p>样例输出</p><p>1E</p><h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 1000</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        c<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            x<span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">;</span>            n<span class="token operator">/</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>            x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="4-特殊回文数"><a href="#4-特殊回文数" class="headerlink" title="4.特殊回文数"></a>4.特殊回文数</h2><h3 id="问题描述：-1"><a href="#问题描述：-1" class="headerlink" title="问题描述："></a>问题描述：</h3><p>问题描述</p><p>123321是一个非常特殊的数，它从左边读和从右边读是一样的。</p><p>　　输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p><p>输入格式</p><p>　　输入一行，包含一个正整数n。</p><p>输出格式</p><p>　　按从<strong>小到大的顺序</strong>(坑逼)输出满足条件的整数，每个整数占一行。</p><p>样例输入</p><p>52</p><p>样例输出</p><p>899998</p><p>989989</p><p>998899</p><p>数据规模和约定</p><p>　　1&lt;=n&lt;=54。</p><h3 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h3><p>  五位数:n=2*(个位+十位)+百位</p><p>  六位数:2*(个位+十位+百位)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 100</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>sum_1<span class="token punctuation">,</span>sum_2<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>z<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>z<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum_1<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum_2<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">+</span>z<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>sum_1<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>sum_2<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="5-回文数"><a href="#5-回文数" class="headerlink" title="5.回文数"></a>5.回文数</h2><h3 id="问题描述：-2"><a href="#问题描述：-2" class="headerlink" title="问题描述："></a>问题描述：</h3><p>问题描述</p><p>　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p><p>输出格式</p><p>　　按从小到大的顺序输出满足条件的四位十进制数。</p><h3 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">--</span><span class="token operator">-</span>## <span class="token number">6</span><span class="token punctuation">.</span>特殊的数字<span class="token punctuation">(</span>水仙花数<span class="token punctuation">)</span>### 题目概述：问题描述　　<span class="token number">153</span>是一个非常特殊的数，它等于它的每位数字的立方和，即<span class="token number">153</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span>。编程求所有满足这种条件的三位十进制数。输出格式　　按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。### 思想：        枚举### 代码：<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>c    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>    y<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    z<span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">+</span>y<span class="token operator">*</span>y<span class="token operator">*</span>y<span class="token operator">+</span>z<span class="token operator">*</span>z<span class="token operator">*</span>z<span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="7-杨辉三角形"><a href="#7-杨辉三角形" class="headerlink" title="7.杨辉三角形"></a>7.杨辉三角形</h2><h3 id="题目概述：-2"><a href="#题目概述：-2" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。</p><p>　　<br>它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。</p><p>　　<br>下面给出了杨辉三角形的前4行：</p><p>　　<br>   1</p><p>　　<br>  1 1</p><p>　　<br> 1 2 1</p><p>　　<br>1 3 3 1</p><p>　　<br>给出n，输出它的前n行。</p><p>输入格式</p><p>输入包含一个数n。</p><p>输出格式</p><p>输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。</p><p>样例输入</p><p>4</p><p>样例输出</p><p>1</p><p>1 1</p><p>1 2 1</p><p>1 3 3 1</p><p>数据规模与约定</p><p>1 &lt;= n &lt;= 34。</p><h3 id="思想：-1"><a href="#思想：-1" class="headerlink" title="思想："></a>思想：</h3><pre><code>    二维数组</code></pre><h3 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 100</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>k<span class="token operator">==</span>i<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>i<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//顶部两侧相加</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="8-查找整数"><a href="#8-查找整数" class="headerlink" title="8.查找整数"></a>8.查找整数</h2><h3 id="题目概述：-3"><a href="#题目概述：-3" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</p><p>输入格式</p><p>第一行包含一个整数n。</p><p>第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。</p><p>第三行包含一个整数a，为待查找的数。</p><p>输出格式</p><p>如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。<br>样例输入</p><p>6</p><p>1 9 4 8 3 9</p><p>9</p><p>样例输出</p><p>2</p><p>数据规模与约定</p><p>1 &lt;= n &lt;= 1000。</p><h3 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 1000</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span>m<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            o<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="9-数列特征"><a href="#9-数列特征" class="headerlink" title="9.数列特征"></a>9.数列特征</h2><h3 id="题目概述：-4"><a href="#题目概述：-4" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>给出n个数，找出这n个数的最大值，最小值，和。</p><p>输入格式</p><p>第一行为整数n，表示数的个数。</p><p>第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。</p><p>输出格式</p><p>输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</p><p>样例输入</p><p>5</p><p>1 3 -2 4 5</p><p>样例输出</p><p>5</p><p>-2</p><p>11</p><p>数据规模与约定</p><p>1 &lt;= n &lt;= 10000。</p><h3 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 10000</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>ave<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        max<span class="token operator">=</span>min<span class="token operator">=</span>sum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span>        max<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span>        min<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d\n%d"</span><span class="token punctuation">,</span>max<span class="token punctuation">,</span>min<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="10-字母图形"><a href="#10-字母图形" class="headerlink" title="10.字母图形"></a>10.字母图形</h2><h3 id="题目概述：-5"><a href="#题目概述：-5" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>利用字母可以组成一些美丽的图形，下面给出了一个例子：</p><p>ABCDEFG</p><p>BABCDEF</p><p>CBABCDE</p><p>DCBABCD</p><p>EDCBABC</p><p>这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。</p><p>输入格式</p><p>输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。</p><p>输出格式</p><p>输出n行，每个m个字符，为你的图形。</p><p>样例输入</p><p>5 7</p><p>样例输出</p><p>ABCDEFG</p><p>BABCDEF</p><p>CBABCDE</p><p>DCBABCD</p><p>EDCBABC</p><p>数据规模与约定</p><p>1 &lt;= n, m &lt;= 26。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>阶数行数相同的位置为A，沿左或下一次加一</p><h3 id="代码：-7"><a href="#代码：-7" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 100</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'A'</span><span class="token punctuation">;</span>        k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>i<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>i<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>i<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>m<span class="token number">-1</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="11-01字串"><a href="#11-01字串" class="headerlink" title="11.01字串"></a>11.01字串</h2><h3 id="题目概述：-6"><a href="#题目概述：-6" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：</p><p>00000</p><p>00001</p><p>00010</p><p>00011</p><p>00100</p><p>请按从小到大的顺序输出这32种01串。</p><p>输入格式</p><p>本试题没有输入。</p><p>输出格式</p><p>输出32行，按从小到大的顺序每行一个长度为5的01串。</p><p>样例输出</p><p>00000</p><p>00001</p><p>00010</p><p>00011</p><p>&lt;以下部分省略&gt;</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p>枚举</p><h3 id="代码：-8"><a href="#代码：-8" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>o<span class="token punctuation">,</span>w<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>z<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>z<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>w<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>w<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>o<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="12-闰年判断"><a href="#12-闰年判断" class="headerlink" title="12.闰年判断"></a>12.闰年判断</h2><h3 id="题目概述：-7"><a href="#题目概述：-7" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>给定一个年份，判断这一年是不是闰年。</p><p>当以下情况之一满足时，这一年是闰年：</p><ol><li><p>年份是4的倍数而不是100的倍数；</p></li><li><p>年份是400的倍数。</p></li></ol><p>其他的年份都不是闰年。</p><p>输入格式</p><p>输入包含一个整数y，表示当前的年份。</p><p>输出格式</p><p>输出一行，如果给定的年份是闰年，则输出yes，否则输出no。</p><p>说明：当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定</p><p>的大小写，写错大小写将不得分。</p><p>样例输入</p><p>2013</p><p>样例输出</p><p>no</p><p>样例输入</p><p>2016</p><p>样例输出</p><p>yes</p><p>数据规模与约定</p><p>1990 &lt;= y &lt;= 2050。</p><h3 id="代码：-9"><a href="#代码：-9" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>n<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="13-Fibonacci数列"><a href="#13-Fibonacci数列" class="headerlink" title="13.Fibonacci数列"></a>13.Fibonacci数列</h2><h3 id="题目概述：-8"><a href="#题目概述：-8" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</p><p>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</p><p>输入格式</p><p>输入包含一个整数n。</p><p>输出格式</p><p>输出一行，包含一个整数，表示Fn除以10007的余数。</p><p><strong>说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</strong></p><p>样例输入</p><p>10</p><p>样例输出</p><p>55</p><p>样例输入</p><p>22</p><p>样例输出</p><p>7704</p><p>数据规模与约定</p><p>1 &lt;= n &lt;= 1,000,000。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li>别用递归！别用递归！！别用递归！！！</li><li>能用scanf(“%”,a[N]) 就别用while((c=getchar())!=’\n’) 会超时<h3 id="代码：-10"><a href="#代码：-10" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span> <span class="token macro property">#<span class="token directive keyword">define</span> N 100001</span> <span class="token macro property">#<span class="token directive keyword">define</span> x 10007</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>     <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>     <span class="token keyword">long</span> <span class="token keyword">long</span> s<span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     s<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10007</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><hr><h2 id="14-圆的面积"><a href="#14-圆的面积" class="headerlink" title="14.圆的面积"></a>14.圆的面积</h2><h3 id="题目概述：-9"><a href="#题目概述：-9" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>给定圆的半径r，求圆的面积。</p><p>输入格式</p><p>输入包含一个整数r，表示圆的半径。</p><p>输出格式</p><p>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。</p><p>说明：在本题中，输入是一个整数，但是输出是一个实数。</p><p>对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。</p><p>实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。</p><p>样例输入</p><p>4</p><p>样例输出</p><p>50.2654825</p><p>数据规模与约定</p><p>1 &lt;= r &lt;= 10000。</p><p>提示</p><p>本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。</p><h3 id="代码：-11"><a href="#代码：-11" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> PI 3.14159265358979323</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.7lf"</span><span class="token punctuation">,</span>PI<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="15-序列求和"><a href="#15-序列求和" class="headerlink" title="15.序列求和"></a>15.序列求和</h2><h3 id="题目概述：-10"><a href="#题目概述：-10" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>求1+2+3+…+n的值。</p><p>输入格式</p><p>输入包括一个整数n。</p><p>输出格式</p><p>输出一行，包括一个整数，表示1+2+3+…+n的值。</p><p>样例输入</p><p>4</p><p>样例输出</p><p>10</p><p>样例输入</p><p>100</p><p>说明：有一些试题会给出多组样例输入输出以帮助你更好的做题。</p><p>一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就<br>是完全正确的，潜在的错误可能仍然导致你的得分较低。</p><p>样例输出</p><p>5050</p><p>数据规模与约定</p><p>1 &lt;= n &lt;= 1,000,000,000。</p><p>说明：请注意这里的数据规模。</p><p>本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用1000000000作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。</p><p>本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。</p><p>如果你使用C++或C语言而且准备使用printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数。</p><h3 id="代码：-12"><a href="#代码：-12" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="16-A-B问题"><a href="#16-A-B问题" class="headerlink" title="16.A+B问题"></a>16.A+B问题</h2><h2 id="略"><a href="#略" class="headerlink" title="略"></a>略</h2><h2 id="17-阶乘-数值较大"><a href="#17-阶乘-数值较大" class="headerlink" title="17.阶乘(数值较大)"></a>17.阶乘(数值较大)</h2><h3 id="题目概述：-11"><a href="#题目概述：-11" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述<br>　　<br>输入一个正整数n，输出n!的值。</p><p>　　其中n!=1<em>2</em>3<em>…</em>n。</p><p>　　输入包含一个正整数n，n&lt;=1000。<br>输出格式</p><p>　　输出n!的准确值。</p><p>样例输入</p><p>10</p><p>样例输出</p><p>3628800</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>　　n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来<br>表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。</p><p>　　将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。</p><p>　　首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。<br>输入格式</p><h3 id="代码：-13"><a href="#代码：-13" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 10000</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> m<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>        m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//多算一位方便进位</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//进位 注：本位乘完再从前一位进位</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                m<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        m<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>m<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p><strong><em>能用scanf()就别用while((c=getchar)!=’\n’)</em></strong></p><hr><h2 id="18-高精度加法"><a href="#18-高精度加法" class="headerlink" title="18.高精度加法"></a>18.高精度加法</h2><h3 id="题目概述：-12"><a href="#题目概述：-12" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述　　</p><p>输入两个整数a和b，输出这两个整数的和。a和b都不超过100位。</p><p>输入格式　　</p><p>输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。</p><p>输出格式</p><p>　　<br>输出一行，表示a + b的值。</p><p>样例输入</p><p>20100122201001221234567890</p><p>2010012220100122</p><p>样例输出<br>20100122203011233454668012</p><h3 id="算法描述："><a href="#算法描述：" class="headerlink" title="算法描述："></a>算法描述：</h3><p>　　<br>由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。</p><p>　　<br>定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。　　</p><p>计算c = a + b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。　　</p><p>最后将C输出即可。</p><h3 id="代码：-14"><a href="#代码：-14" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 1000</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        <span class="token keyword">char</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串数组最后一位是'\0'，故此处多-1；</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//倒置使得个位对齐，方便计算</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        y<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同上</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>y<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同上</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max<span class="token punctuation">;</span>        max<span class="token operator">=</span>x<span class="token operator">></span>y<span class="token operator">?</span>x<span class="token punctuation">:</span>y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//长的作为最终长度</span>        x<span class="token operator">=</span>max<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>max<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//若第max位进位了，则max+1</span>        max<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>max<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>max<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="19-Huffuman树-贪心算法"><a href="#19-Huffuman树-贪心算法" class="headerlink" title="19.Huffuman树(贪心算法)"></a>19.Huffuman树(贪心算法)</h2><h3 id="题目概述：-13"><a href="#题目概述：-13" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>　　<br>Huffman树在编码中有着广泛的应用。在这里，我们只关心Huffman树的构造过程。<br>　　<br>给出一列数{pi}={p0, p1, …, pn-1}，用这列数构造Huffman树的过程如下：　　</p><ol><li>找到{pi}中最小的两个数，设为pa和pb，将pa和pb从{pi}中删除掉，然后将它们的和加入到{pi}中。这个过程的费用记为pa + pb。　　</li><li>重复步骤1，直到{pi}中只剩下一个数。<br>　　<br>在上面的操作过程中，把所有的费用相加，就得到了构造Huffman树的总费用。<br>　　<br>本题任务：对于给定的一个数列，现在请你求出用该数列构造Huffman树的总费用。</li></ol><p>　　<br>例如，对于数列{pi}={5, 3, 8, 2, 9}，Huffman树的构造过程如下：　　</p><ol><li>找到{5, 3, 8, 2, 9}中最小的两个数，分别是2和3，从{pi}中删除它们并将和5加入，得到{5, 8, 9, 5}，费用为5。　　</li><li>找到{5, 8, 9, 5}中最小的两个数，分别是5和5，从{pi}中删除它们并将和10加入，得到{8, 9, 10}，费用为10。　　</li><li>找到{8, 9, 10}中最小的两个数，分别是8和9，从{pi}中删除它们并将和17加入，得到{10, 17}，费用为17。　　</li><li>找到{10, 17}中最小的两个数，分别是10和17，从{pi}中删除它们并将和27加入，得到{27}，费用为27。　　</li><li>现在，数列中只剩下一个数27，构造过程结束，总费用为5+10+17+27=59。</li></ol><p>输入格式</p><p>　　<br>输入的第一行包含一个正整数n（n&lt;=100）。</p><p>　　<br>接下来是n个正整数，表示p0, p1, …, pn-1，每个数不超过1000。</p><p>输出格式</p><p>　　<br>输出用这些数构造Huffman树的总费用。</p><p>样例输入</p><p>5</p><p>5 3 8 2 9</p><p>样例输出</p><p>59</p><h3 id="思想：-2"><a href="#思想：-2" class="headerlink" title="思想："></a>思想：</h3><p>贪心算法步骤：数组排序-&gt;取值计算-&gt;计算后的值带入原数组中(取代i+1位)-&gt;排序-&gt;取值计算-&gt;……</p><p>重复上述n-1次(若有n个元素)</p><h3 id="代码：-15"><a href="#代码：-15" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> N 10000</span>    <span class="token keyword">void</span> <span class="token function">maopao</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//冒泡排序</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>k<span class="token punctuation">,</span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>begin<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>begin<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>end<span class="token number">-1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                m<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>end<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        end<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>begin<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>end<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">maopao</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排序</span>        sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取值计算</span>        a<span class="token punctuation">[</span>begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//替代</span>        begin<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> title </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解</title>
      <link href="2021/04011.html"/>
      <url>2021/04011.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-比较C和python两种语言执行效率"><a href="#1-比较C和python两种语言执行效率" class="headerlink" title="1.比较C和python两种语言执行效率"></a>1.比较C和python两种语言执行效率</h2><p>Step 1: 求1+2+3+…+n</p><p>n = 1 000, 10 000, 100 000, 100 000, 1 000 000, 10 000 000, 100 000 000</p><p>Step 2: 输出执行时间；</p><h2 id="c语言："><a href="#c语言：" class="headerlink" title="c语言："></a>c语言：</h2><pre><code>#include&lt;stdio.h&gt;#include &lt;time.h&gt;#define n 10000000 int main()&#123;    long long num_sum = 0;    clock_t start, finish;    double Total_time;    start = clock();        //计时开始    int i;    for(i=1;i&lt;n+1;i++)        num_sum=num_sum+i;    finish = clock();    //计时结束    Total_time = (double)(finish - start) / CLOCKS_PER_SEC;    printf(&quot;%f seconds\n&quot;, Total_time);    printf(&quot;%lf&quot;, (double)num_sum);    return 0; &#125;</code></pre><h2 id="Python"><a href="#Python" class="headerlink" title="Python:"></a>Python:</h2><pre><code>import timenum_sum = 0start = time.time()    #计时开始i=1n=100000000while i &lt;n+1:    num_sum=num_sum+i    i=i+1finish = time.time()    #计时结束Total_time = finish - startprint(&quot;%f seconds\n&quot; % Total_time)print(&quot;%d&quot;% num_sum)</code></pre><hr><h2 id="2-求最大公因子"><a href="#2-求最大公因子" class="headerlink" title="2.求最大公因子"></a>2.求最大公因子</h2><p>Input：任意正整数 m,n</p><p>Output: gcd(m,n)，即m,n的最大公因子 </p><h3 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h3><h4 id="更相减损术："><a href="#更相减损术：" class="headerlink" title="更相减损术："></a>更相减损术：</h4><pre><code>#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123;#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123;int a,b,c,i=0,A,B;scanf(&quot;%d %d&quot;,&amp;A,&amp;B);a=A&gt;B?A:B;b=A&lt;B?A:B;do&#123;if(a%2==0&amp;&amp;b%2==0)&#123;a=a/2;b=b/2;i++;&#125;c=a-b;if(b&gt;c)&#123;a=b;b=c;&#125;else&#123;a=c;&#125;&#125;while(c!=0);printf(&quot;%d&quot;,(int)(a*pow(2,i)));return 0;&#125;</code></pre><h4 id="辗转相除法："><a href="#辗转相除法：" class="headerlink" title="辗转相除法："></a>辗转相除法：</h4><pre class=" language-#include&lt;stdio.h&gt;"><code class="language-#include&lt;stdio.h&gt;">int main()&#123;int a,b,c;scanf("%d %d",&a,&b);while(b!=0)&#123;c=a%b;a=b;b=c;&#125;printf("%d",a);return 0;&#125;</code></pre><hr><h2 id="3-冒泡排序、快速排序算法"><a href="#3-冒泡排序、快速排序算法" class="headerlink" title="3.冒泡排序、快速排序算法"></a>3.冒泡排序、快速排序算法</h2><p>输入：无序数组</p><p>输出：有序数组</p><h2 id="c语言-1"><a href="#c语言-1" class="headerlink" title="c语言"></a>c语言</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>基本思想：：参见排序算法专栏</p><pre><code>#include&lt;stdio.h&gt;#include&lt;time.h&gt;#include&lt;stdlib.h&gt;int main()&#123;clock_t start, finish;double Total_time;start = clock();int arr[10000],i=0,n;scanf(&quot;%d&quot;,&amp;n);srand(time(NULL));for(i=0;i&lt;n;i++)arr[i]=rand();//随机数组void quickSort(int *arr,int left, int right );start = clock();//计时开始quickSort(arr,0,n);finish = clock();//计时结束Total_time = (double)(finish - start) / CLOCKS_PER_SEC;printf(&quot;%f seconds\n&quot;, Total_time);for(i=0;i&lt;n;i++)printf(&quot;%d &quot;,arr[i]);return 0;&#125;void quickSort(int *arr,int left, int right)//快速排序&#123;    if(left &gt;= right)        return;    int i, j, base, temp;    i = left, j = right;    base = arr[left];  //取最左边的数为基准数    while (i &lt; j)    &#123;        while (arr[j] &gt;= base &amp;&amp; i &lt; j)            j--;        while (arr[i] &lt;= base &amp;&amp; i &lt; j)            i++;        if(i &lt; j)        &#123;            temp = arr[i];            arr[i] = arr[j];            arr[j] = temp;        &#125;    &#125;    //基准数归位    arr[left] = arr[i];    arr[i] = base;    quickSort(arr,left, i - 1 );//递归左边    quickSort(arr,i + 1, right );//递归右边&#125;</code></pre><h3 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h3><p>基本思想：：参见排序算法专栏</p><pre><code>#include&lt;stdio.h&gt;#include&lt;time.h&gt;#include&lt;stdlib.h&gt;int main()&#123;int i,j,v,n;int a[10000];clock_t start, finish;double Total_time;scanf(&quot;%d&quot;,&amp;n);srand(time(NULL));for(i=0;i&lt;n;i++)a[i]=rand()%100;//生成随机数组    start = clock();//开始记时    for(i=0; i&lt;n; i++)    &#123;        int flag=0;                      for(j=1; j&lt;n-i; j++)        &#123;                       if(a[j]&lt;a[j-1])            &#123;               v=a[j];               a[j]=a[j-1];               a[j-1]=v;                flag=1;            &#125;        &#125;        &#125; //冒泡排序    finish = clock();//计时结束；Total_time = (double)(finish - start) / CLOCKS_PER_SEC;printf(&quot;%f seconds\n&quot;, Total_time);            for(i=0; i&lt;n; i++)    printf(&quot;%d &quot;,a[i]);    return 0;&#125;</code></pre><hr><h2 id="4-得分"><a href="#4-得分" class="headerlink" title="4.得分"></a>4.得分</h2><p>给出一个由O和X组成的串（长度为1~80），统计得分，每个O得分为目前连续出现O的个数，x的德丰为0.例如：OOXXOXXOOO得分为1+2+0+0+1+0+0+1+2+3</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.创造一个字符串数组存储输入的字符</p><p>2.依次判断数组元素</p><p>3.累加求和</p><h3 id="c："><a href="#c：" class="headerlink" title="c："></a>c：</h3><pre><code>#include&lt;stdio.h&gt;int main()&#123;char d[101],c;int i=0,sum=0;while((c=getchar())!=&#39;\n&#39;)&#123;if(c==&#39;O&#39;)&#123;i++;sum=sum+i;&#125;   if(c==&#39;X&#39;)   i=0;&#125;printf(&quot;%d&quot;,sum);    return 0;&#125;</code></pre><hr><h2 id="4-分子量"><a href="#4-分子量" class="headerlink" title="4.分子量"></a>4.分子量</h2><p>给出一种物质的分子式(不带括号)，求分子量。本题中的分子式只包含四种原子，分别是C,H,O,N，原子量分别为12.01,1.008,16.00,14.01(单位g/mol)。例如：C6H5OH的分子量为94.108g/mol。</p><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>1.读取输入的字符将其存储到字符串数组中</p><p>2.判断本位字符a[i]的后一位字符a[i+1]是否’2’~’9’，如果是则将字符对应 原子量*(a[i+1] -‘0’)</p><p>3.重复步骤2</p><h3 id="c：-1"><a href="#c：-1" class="headerlink" title="c："></a>c：</h3><pre><code>#include&lt;stdio.h&gt;int main()&#123;int i=0;double sum=0;char c,d[1000];double lo(char c);while((c=getchar())!=&#39;\n&#39;)&#123;d[i]=c;i++;&#125;for(;i&gt;=0;i--)&#123;c=d[i];if(d[i+1]&gt;&#39;2&#39;&amp;&amp;d[i+1]&lt;=&#39;9&#39;)&#123;sum=sum+lo(d[i])*(d[i+1]-&#39;0&#39;);i--;&#125;elsesum=lo(d[i])+sum;&#125;printf(&quot;%.3lfg/mol&quot;,sum);return 0;&#125;double lo(char c)&#123;if(c==&#39;C&#39;) return 12.01;if(c==&#39;H&#39;) return 1.008;if(c==&#39;O&#39;) return 16.00;if(c==&#39;N&#39;) return 14.01;&#125;</code></pre><hr><h2 id="5-数数字"><a href="#5-数数字" class="headerlink" title="5.数数字"></a>5.数数字</h2><p>输入一串数字，输出0~~9各出现多少次</p><h3 id="c"><a href="#c" class="headerlink" title="c:"></a>c:</h3><pre><code>#include&lt;stdio.h&gt;int main()&#123;int i=0,k=0,a[100],l;char c,d[1000];while((c=getchar())!=&#39;\n&#39;)&#123;d[i++]=c;&#125;while(k&lt;10)a[k++]=0;for(k=9;k&gt;=0;k--)for(l=i;l&gt;=0;l--)&#123;if(d[l]-&#39;0&#39;==k)a[k]+=1;&#125;for(i=0;i&lt;10;i++)printf(&quot;%d &quot;,a[i]);&#125;</code></pre><hr><h2 id="6-字符串逆序-栈操作"><a href="#6-字符串逆序-栈操作" class="headerlink" title="6.字符串逆序(栈操作)"></a>6.字符串逆序(栈操作)</h2><p>输入：一个字符串，如：abc</p><p>输出：一个逆序后的字符串，如：cba</p><p>要求：借助栈这种数据结构来完成</p><h3 id="c：-2"><a href="#c：-2" class="headerlink" title="c："></a>c：</h3><pre><code>#include&lt;stdio.h&gt;#define N 1000int main()&#123; struct Reverse//定义一个结构体 &#123;     char c[N];//储存数组     int topIdx;//顶部指针 &#125;; int i=0; char ch; struct Reverse a, *p; a.topIdx=0; while((ch=getchar())!=&#39;\n&#39;)//栈的输入 &#123;    if(a.topIdx&gt;=N-1)//判断是否还有空间    printf(&quot;栈已满&quot;);    else    a.c[a.topIdx++]=ch;//存储字符 &#125; while(a.topIdx&gt;=0 )&#123;char val = a.c[--a.topIdx];//从顶部向下输出    printf(&quot;%c&quot;,val); &#125; return 0;&#125;</code></pre><h2 id="7-计算器-未完成"><a href="#7-计算器-未完成" class="headerlink" title="7.计算器(未完成)"></a>7.计算器(<strong>未完成</strong>)</h2><p>输入一串运算式</p><p>输出运算结果</p><h3 id="c：-3"><a href="#c：-3" class="headerlink" title="c："></a>c：</h3><h4 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h4><h5 id="1-将数字字符和运算符号字符分离-√"><a href="#1-将数字字符和运算符号字符分离-√" class="headerlink" title="1.将数字字符和运算符号字符分离(√)"></a>1.将数字字符和运算符号字符分离(√)</h5><h5 id="2-将数字字符数组转化为与之的数字"><a href="#2-将数字字符数组转化为与之的数字" class="headerlink" title="2.将数字字符数组转化为与之的数字"></a>2.将数字字符数组转化为与之的数字</h5><h6 id="2-1整数-√"><a href="#2-1整数-√" class="headerlink" title="2.1整数(√)"></a>2.1整数(√)</h6><h6 id="2-2小数"><a href="#2-2小数" class="headerlink" title="2.2小数"></a>2.2小数</h6><h6 id="2-3负数"><a href="#2-3负数" class="headerlink" title="2.3负数"></a>2.3负数</h6><h5 id="3-定义运算字符意义-√"><a href="#3-定义运算字符意义-√" class="headerlink" title="3.定义运算字符意义(√)"></a>3.定义运算字符意义(√)</h5><h5 id="4-定义运算符优先级"><a href="#4-定义运算符优先级" class="headerlink" title="4.定义运算符优先级"></a>4.定义运算符优先级</h5><h5 id="5-组合上述并输出结果"><a href="#5-组合上述并输出结果" class="headerlink" title="5.组合上述并输出结果"></a>5.组合上述并输出结果</h5><h3 id="c：-4"><a href="#c：-4" class="headerlink" title="c："></a>c：</h3><pre><code>#include&lt;stdio.h&gt;#define N 1000int main()&#123;int i=0,k=0,l=0;double double_numble[N];char c,char_numble[N],operator[N],ch[2];while((c=getchar())!=&#39;\n&#39;)//读取数据&#123;    if(c==&#39;(&#39;&amp;&amp;c==&#39;)&#39;&amp;&amp;c==&#39;+&#39;&amp;&amp;c==&#39;-&#39;&amp;&amp;c==&#39;*&#39;&amp;&amp;c==&#39;/&#39;)    &#123;     operator[i++]=c;     char_numble[k++]=&#39;|&#39;;     &#125;  else if(c&gt;=&#39;0&#39;&amp;&amp;c&lt;=&#39;9&#39;)    &#123;       ch[k]=c;       k++;    &#125;&#125;//分离字符return 0;&#125;//计算函数：完成double count(double number_1,char c,double number_2)&#123;  if(c==&#39;+&#39;)  return number_1+number_2;  if(c==&#39;-&#39;)  return number_1-number_2;  if(c==&#39;*&#39;)  return number_1*number_2;  if(c==&#39;/&#39;)  return number_1/number_2;  if(c==&#39;^&#39;)  return pow(number_1,number_2);&#125;//字符串数组(char_numble[N])转换为数值数组(double_numble[N]):整数部分完成void c()&#123;int i=0,k,s=0,l=0;char char_numble[N];int double_numble[N];    for(i=0;i&lt;N;i++)&#123;    if(char_numble[i]&gt;=&#39;0&#39;&amp;&amp;char_numble[i]&lt;=&#39;9&#39;)    &#123;      s=s*10+char_numble[i]-&#39;0&#39;;      printf(&quot;%lf\n&quot;,s);    &#125;    else if(char_numble[0]==&#39;|&#39;)    char_numble[0]=&#39;#&#39;;    else    &#123;    double_numble[l++]=s;    s=0;    &#125;    &#125;    return 0;    &#125;//运算优先级：待完成void d()&#123;  &#125;/*第一优先级：(&amp;&amp;)第二优先级：^第三优先级：###四则运算：加法：    if(a[i]==&#39;+&#39;)    add(a[i-1],a[i+1])减法:    if(a[i]==&#39;-&#39;)    minus(a[i-1],a[i+1])乘法：    if(a[i]==&#39;*&#39;&amp;&amp;a[i]==&#39;×&#39;&amp;&amp;a[i]==&#39;·&#39;)    multiply(a[i-1],a[i+1])除法：    if(a[i]==&#39;/&#39;&amp;&amp;a[i]==&#39;÷&#39;)    divide(a[i-1],a[i+1])###特殊运算乘方:    if(a[i]==&#39;^&#39;)    pow(a[i-1],a[i+1])   */</code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> title </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中字符串和列表常用函数</title>
      <link href="2021/03311.html"/>
      <url>2021/03311.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python中字符串和列表常用函数"><a href="#Python中字符串和列表常用函数" class="headerlink" title="Python中字符串和列表常用函数"></a>Python中字符串和列表常用函数</h1><h2 id="Python字符串函数"><a href="#Python字符串函数" class="headerlink" title="Python字符串函数"></a>Python字符串函数</h2><hr><h3 id="count-返回指定字符重复次数"><a href="#count-返回指定字符重复次数" class="headerlink" title="count (返回指定字符重复次数)"></a>count (返回指定字符重复次数)</h3><p>count 使用方法:</p><p>可以返回字符串对象包含了多少个参数指定的字符串</p><pre><code>字符串变量名.count(元素值)</code></pre><p>返回值：元素在字符串中的个数</p><hr><h3 id="find-引索第一次出现的字符，返回下标"><a href="#find-引索第一次出现的字符，返回下标" class="headerlink" title="find (引索第一次出现的字符，返回下标)"></a>find (引索第一次出现的字符，返回下标)</h3><p>find 使用方法:</p><p>会在<strong>字符串</strong>中查找<em>参数子字符串</em>，并返回该参数字符串 在其中<strong>第一个</strong>出现的位置索引，find函数的第二个参数，用来指定查找字符串**<em>范围**</em></p><pre><code>字符串名.find(&#39;查找的字符&#39;，&#39;查找范围(没有的话默认全体)&#39;)</code></pre><p>如果字符串对象里面 没有 要查找的参数字符串，就会返回 -1</p><hr><h3 id="split-分割"><a href="#split-分割" class="headerlink" title="split (分割)"></a>split (分割)</h3><p>split 以参数字符串为分割符 ，将**<em>字符串**</em>切割为多个 字符串，作为元素存入一个列表，并返回这个列表。</p><pre><code>字符串名.split(作为分割标志的字符) </code></pre><p><strong>补充</strong>： splitlines把字符串<strong>按换行符</strong>进行切割</p><hr><h3 id="join-连接"><a href="#join-连接" class="headerlink" title="join (连接)"></a>join (连接)</h3><p>join：是将列表中的字符串元素 以某字符串为连接符，<strong>连接</strong>为一个字符串</p><pre><code>连接处字符.join(字符串，字符串)(将连接字符替换&#39;,&#39;后连接两个字符串)</code></pre><hr><h3 id="strip-删空格-前后"><a href="#strip-删空格-前后" class="headerlink" title="strip(删空格 前后)"></a>strip(删空格 前后)</h3><p>strip方法可以将字符串<strong>前面和后面</strong>的空格删除，但是不会删除字符串<strong>中间</strong>的空格</p><pre><code>字符串.strip()</code></pre><hr><h3 id="lstrip-删空格-前"><a href="#lstrip-删空格-前" class="headerlink" title="lstrip(删空格 前)"></a>lstrip(删空格 前)</h3><p>lstrip：<br>将字符串**<em>前面(左边)**</em>的空格删除，不会删除字符串中间和右边的空格</p><pre><code>字符串.lstrip()</code></pre><hr><h3 id="rstrip-删空格-后"><a href="#rstrip-删空格-后" class="headerlink" title="rstrip(删空格 后)"></a>rstrip(删空格 后)</h3><p>rstrip方法 将 字符串后面 (右边) 的空格删除，但是不会删除字符串中间和左边的空格</p><pre><code>字符串.rstrip()</code></pre><hr><h3 id="replace-替换"><a href="#replace-替换" class="headerlink" title="replace (替换)"></a>replace (替换)</h3><p>replace 也是常用的方法，用来 替换 字符串里面 所有指定的 子字符串 为另一个 字符串</p><pre><code>字符串名.replace(需替换原字符串，需替换的新字符串)</code></pre><hr><h3 id="startswith-和-endswith-检查开头和结尾"><a href="#startswith-和-endswith-检查开头和结尾" class="headerlink" title="startswith 和 endswith (检查开头和结尾)"></a>startswith 和 endswith (检查开头和结尾)</h3><p>startswith 方法检查字符串是否以参数指定的字符串 开头，如果是，返回True，否则返回False</p><pre><code>字符串名.startswith(所需的检索字符串内容)</code></pre><p>endswith 方法检查字符串是否以指定的字符串 结尾，如果是，返回True，否则返回False</p><pre><code>字符串名.endswith(所需的检索字符串内容)</code></pre><hr><h3 id="isdigit-检查字符串元素类型是否为数字"><a href="#isdigit-检查字符串元素类型是否为数字" class="headerlink" title="isdigit (检查字符串元素类型是否为数字)"></a>isdigit (检查字符串元素类型是否为数字)</h3><p>isdigit 方法检查字符串是否全部由数字构成，如果是，返回True，否则返回False</p><pre><code>字符串名.isdigit()</code></pre><hr><h3 id="字符串的倒序"><a href="#字符串的倒序" class="headerlink" title="字符串的倒序"></a>字符串的倒序</h3><p>要得到一个字符串的 倒序字符串，只需要使用切片操作 [::-1]</p><p>:: 表示切片字符串的从头到尾，也就是全部内容， 而 步长 为 -1 表示，颠倒过来取元素</p><hr><h2 id="列表的常见函数"><a href="#列表的常见函数" class="headerlink" title="列表的常见函数"></a>列表的常见函数</h2><hr><h3 id="append-增添-后"><a href="#append-增添-后" class="headerlink" title="append (增添 后)"></a>append (增添 后)</h3><p>append方法就会改变列表的内容，在后面添加一个元素。</p><pre><code>字符串名.append(添加的元素)</code></pre><p><strong>注</strong>:append 方法的返回值是 None</p><hr><h3 id="insert-增添-中"><a href="#insert-增添-中" class="headerlink" title="insert(增添 中)"></a>insert(增添 中)</h3><p>如果我们 不是要在后面 添加一个元素， 而是在 指定位置插入一个元素(<strong>将原元素往后挤</strong>)，就可以使用insert方法</p><pre><code>列表名.insert(插入位置,插入内容)</code></pre><p><strong>注</strong>:insert方法的返回值也是 None</p><hr><h3 id="pop-取出并删除"><a href="#pop-取出并删除" class="headerlink" title="pop(取出并删除)"></a>pop(取出并删除)</h3><pre><code>列表名.pop(元素序号)</code></pre><p><strong>注</strong>:pop 方法的返回值 是 提取出来的元素</p><hr><h3 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove(删除)"></a>remove(删除)</h3><pre><code>列表名.remove(元素值)</code></pre><p><strong>注</strong>:remove 方法的返回值也是 None</p><hr><h3 id="revers-将列表元素倒过来"><a href="#revers-将列表元素倒过来" class="headerlink" title="revers (将列表元素倒过来)"></a>revers (将列表元素倒过来)</h3><pre><code>列表名.reverse()</code></pre><p><strong>注</strong>:reverse 方法的返回值也是 None</p><hr><h3 id="index-返回引索元素的下标"><a href="#index-返回引索元素的下标" class="headerlink" title="index(返回引索元素的下标)"></a>index(返回引索元素的下标)</h3><pre><code>列表名.index(元素值)</code></pre><p><strong>注</strong>:index 的返回值是对应引索元素的下标</p><hr><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort(排序)"></a>sort(排序)</h3><p>调用sort 方法，的列表中的元素通常都是是<strong>数字</strong>或者<strong>字符串</strong></p><pre><code>列表名.sort()</code></pre><p><strong>注</strong>:sort方法的返回值是None，不是排序后的列表</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="2021/032461237.html"/>
      <url>2021/032461237.html</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>注：<br>稳定:如果a原本在b前面，而a=b，排序之后a仍然在b的前面.</p><p>不稳定:<br>如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</p><p>内排序:<br>所有排序操作都在内存中完成；<br>外排序:由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</p><p>时间复杂度: 一个算法执行所耗费的时间。</p><p>空间复杂度:运行完一个程序所需内存的大小。</p><hr><h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><h3 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h3><p>1.先从数列中取出一个数作轴值（基准数）<br>2.根据基准数将数列进行分区，小于基准数的放左边，大于基准数的放右边；<br>3.重复分区操作，知道各区间只有一个数为止。</p><h3 id="算法流程："><a href="#算法流程：" class="headerlink" title="算法流程："></a>算法流程：</h3><p>(算法核心:递归+挖坑填数+分区)</p><p><strong><em>注：挖坑填数:将数值赋给另一个变量留出可坑位，运算结束之后在，将原数值赋给现有坑位。</em></strong></p><p>1：从数列中挑出一个元素，称为 “基准”（pivot ）；</p><p>2：重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区操作。</p><p>3：递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</p><p><img src="https://img-blog.csdnimg.cn/20191021120222301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hndWlzdQ==,size_16,color_FFFFFF,t_70" alt="快速排序图示"></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre><code>#include&lt;stdio.h&gt;#include&lt;time.h&gt;#include&lt;stdlib.h&gt;int main()&#123;clock_t start, finish;double Total_time;start = clock();int arr[10000],i=0,n;scanf(&quot;%d&quot;,&amp;n);srand(time(NULL));for(i=0;i&lt;n;i++)arr[i]=rand();//随机数组void quickSort(int *arr,int left, int right );start = clock();//计时开始quickSort(arr,0,n);finish = clock();//计时结束Total_time = (double)(finish - start) / CLOCKS_PER_SEC;printf(&quot;%f seconds\n&quot;, Total_time);for(i=0;i&lt;n;i++)printf(&quot;%d &quot;,arr[i]);return 0;&#125;void quickSort(int *arr,int left, int right)//快速排序&#123;    if(left &gt;= right)        return;    int i, j, base, temp;    i = left, j = right;    base = arr[left];  //取最左边的数为基准数    while (i &lt; j)    &#123;        while (arr[j] &gt;= base &amp;&amp; i &lt; j)            j--;        while (arr[i] &lt;= base &amp;&amp; i &lt; j)            i++;        if(i &lt; j)        &#123;            temp = arr[i];            arr[i] = arr[j];            arr[j] = temp;        &#125;    &#125;    //基准数归位    arr[left] = arr[i];    arr[i] = base;    quickSort(arr,left, i - 1 );//递归左边    quickSort(arr,i + 1, right );//递归右边&#125;</code></pre><hr><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><h3 id="基本思想：-1"><a href="#基本思想：-1" class="headerlink" title="基本思想："></a>基本思想：</h3><p>对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒</p><h3 id="算法流程-递增为例-："><a href="#算法流程-递增为例-：" class="headerlink" title="算法流程(递增为例)："></a>算法流程(递增为例)：</h3><p>1.比较相邻的元素。如果第一个比第二个大，就交换他们两个</p><p>2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数</p><p>3.针对所有的元素重复以上的步骤，除了最后一个</p><p>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMjMyMzg0NDktMjE0NjE2OTE5Ny5naWY" alt="冒泡排序示意图"></p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><pre><code>#include&lt;stdio.h&gt;#include&lt;time.h&gt;#include&lt;stdlib.h&gt;int main()&#123;int i,j,v,n;int a[10000];clock_t start, finish;double Total_time;scanf(&quot;%d&quot;,&amp;n);srand(time(NULL));for(i=0;i&lt;n;i++)a[i]=rand()%100;//生成随机数组    start = clock();//开始记时    for(i=0; i&lt;n; i++)    &#123;        int flag=0;                      for(j=1; j&lt;n-i; j++)        &#123;                       if(a[j]&lt;a[j-1])            &#123;               v=a[j];               a[j]=a[j-1];               a[j-1]=v;                flag=1;            &#125;        &#125;        &#125; //冒泡排序    finish = clock();//计时结束；Total_time = (double)(finish - start) / CLOCKS_PER_SEC;printf(&quot;%f seconds\n&quot;, Total_time);            for(i=0; i&lt;n; i++)    printf(&quot;%d &quot;,a[i]);    return 0;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="2021/03211.html"/>
      <url>2021/03211.html</url>
      
        <content type="html"><![CDATA[<pre><code>    #include&lt;stdio.h&gt;    #include&lt;math.h&gt;    #include&lt;stdlib.h&gt;    #define N 100    //数字栈    struct num    &#123;        double a[N];        int top;    &#125;data_1;    //运算符栈    struct O    &#123;        char b[N];        int top;    &#125;data_2;    //入栈    void input_double(struct num *data_1,double n)    &#123;        data_1-&gt;top++;        data_1-&gt;a[data_1-&gt;top]=n;    &#125;    //入栈    void input_char(struct O *data_2,char n)    &#123;        data_2-&gt;top++;        data_2-&gt;b[data_2-&gt;top]=n;    &#125;    //出栈    double output_double(struct num *data_1)    &#123;        double n;        n=data_1-&gt;a[data_1-&gt;top];        data_1-&gt;top --;        return n;            &#125;    //出栈    char output_char(struct O *data_2)    &#123;        char n;        n=data_2-&gt;b[data_2-&gt;top];        data_2-&gt;top --;        return n;            &#125;    //栈顶数据    char get_top(struct O *data_2)    &#123;   char c;    c=data_2-&gt;b[data_2-&gt;top];        return c;    &#125;    //运算    double Math(double v1, double v2, char c)    &#123;        double sum;        switch(c) &#123;            case &#39;+&#39; : &#123;                sum = v1 + v2;                break;            &#125;            case &#39;-&#39; : &#123;                sum = v1 - v2;                break;            &#125;            case &#39;*&#39; : &#123;                sum = v1 * v2;                break;            &#125;             case &#39;/&#39; : &#123;                sum = v1 / v2;                break;            &#125;        &#125;        return sum;    &#125;    /*符号优先级判断*/    int judge(char ch) &#123;        if(ch == &#39;(&#39;)        &#123;            return 1;         &#125;        if(ch == &#39;+&#39; || ch == &#39;-&#39;) &#123;            return 2;        &#125;        else if(ch == &#39;*&#39; || ch == &#39;/&#39;) &#123;            return 3;        &#125;        else if(ch == &#39;)&#39;) &#123;            return 4;        &#125;    &#125;    //字符化数字    double change(char *ch)    &#123; int i=0,k,o=0;    double s=0;        if(ch[0]==&#39;|&#39;)        i++;        while(ch[i]!=&#39;|&#39;)&#123;        if(ch[i]==&#39;-&#39;)        o=1;//负数开关        else if(ch[i]&gt;=&#39;0&#39;&amp;&amp;ch[i]&lt;=&#39;9&#39;)//整数部分        &#123;        s=s*10+ch[i]-&#39;0&#39;;        &#125;        else if(ch[i]==&#39;.&#39;)//小数部分        &#123;        k=i;        do        &#123;            s+=(ch[++i]-&#39;0&#39;)*pow(0.1,i-k);        &#125;while(ch[i+1]!=&#39;|&#39;);                &#125;        else        &#123;        if(o!=0)        s=-s;        &#125;        i++;        &#125;        if(o!=0)        s=-s;        return s;        &#125;    int main()    &#123;        data_1.top=-1;//初始化        data_2.top=-1;//初始化        char c,ch[N];//储存原始数据        int n1=0,i=0,k=0;//数组下标        char cha[N];//存储字符数字        double sum=0,x1,x2;        while((c=getchar())!=&#39;\n&#39;)        ch[n1++]=c;        ch[n1]=&#39;|&#39;;//输入结束标志        if(ch[0]==&#39;-&#39;)//开始时候的负号        cha[k++]=ch[0];        for(i=k;i&lt;=n1;i++)        &#123;        if(ch[i]==&#39;(&#39;&amp;&amp;ch[i+1]==&#39;-&#39;)//中间的负号        &#123;            input_char(&amp;data_2,ch[i]);            cha[k++]=ch[++i];            &#125;        else if((ch[i]&gt;=&#39;0&#39;&amp;&amp;ch[i]&lt;=&#39;9&#39;)||ch[i]==&#39;.&#39;)//分离数字字符将其转化对应的数字        &#123;        while((ch[i]&gt;=&#39;0&#39;&amp;&amp;ch[i]&lt;=&#39;9&#39;)||ch[i]==&#39;.&#39;)        &#123;            cha[k++]=ch[i++];            cha[k]=&#39;|&#39;;//分隔标志        &#125;        input_double(&amp;data_1,change(cha));        while(k!=0)        &#123;            cha[k--]=0;        &#125;        i--;        &#125;        else         &#123;            if(data_2.top == -1)//若栈为空            input_char(&amp;data_2,ch[i]);            else if(judge(ch[i])==1)//若为&#39;(&#39;直接入栈            &#123;                input_char(&amp;data_2,ch[i]);            &#125;            else if(judge(ch[i])==2)//若为&#39;+&#39;和&#39;-&#39;            &#123;            if(judge(get_top(&amp;data_2))==1)//栈顶为&#39;(&#39;直接入栈                input_char(&amp;data_2,ch[i]);                else if(judge(get_top(&amp;data_2))==2)//栈顶为同级运算符时                &#123;                    while(data_2.top&gt;=0&amp;&amp;data_1.top&gt;=1)//循环出栈                    &#123;                        x2=output_double(&amp;data_1);                        x1=output_double(&amp;data_1);                        sum=Math(x1,x2,output_char(&amp;data_2));                        input_double(&amp;data_1,sum);//运算后的数据入栈                    &#125;                    input_char(&amp;data_2,ch[i]);//新符号入栈                &#125;                else if(judge(get_top(&amp;data_2))==3)//若栈顶高级运算符时                &#123;                    while(data_2.top&gt;=0&amp;&amp;data_1.top&gt;=1)//循环出栈                    &#123;                        x2=output_double(&amp;data_1);                        x1=output_double(&amp;data_1);                        sum=Math(x1,x2,output_char(&amp;data_2));                        input_double(&amp;data_1,sum);//运算后的数据入栈                    &#125;                    input_char(&amp;data_2,ch[i]);//新符号入栈                &#125;            &#125;            else if(judge(ch[i])==3)            &#123;                if(judge(get_top(&amp;data_2))==1)//栈顶为&#39;(&#39;直接入栈                input_char(&amp;data_2,ch[i]);                else if(judge(get_top(&amp;data_2))==2)//栈顶为低级运算符时直接入栈                input_char(&amp;data_2,ch[i]);                else if(judge(get_top(&amp;data_2))==3)//栈顶为同级运算符时                &#123;                    while(data_2.top&gt;=0&amp;&amp;data_1.top&gt;=1)//循环出栈                    &#123;                        x2=output_double(&amp;data_1);                        x1=output_double(&amp;data_1);                        sum=Math(x1,x2,output_char(&amp;data_2));                        input_double(&amp;data_1,sum);//运算后的数据入栈                    &#125;                    input_char(&amp;data_2,ch[i]);//新符号入栈                &#125;            &#125;            else if(judge(ch[i])==4)//若为&#39;)&#39;时，循环出栈，直到遇到&#39;(&#39;            &#123;            do            &#123;                x2=output_double(&amp;data_1);                x1=output_double(&amp;data_1);                sum=Math(x1,x2,output_char(&amp;data_2));                input_double(&amp;data_1,sum);            &#125; while (judge(get_top(&amp;data_2))==1);            output_char(&amp;data_2);//去掉&#39;(&#39;            &#125;        &#125;        &#125;//运算符优先级已经排好        while(data_2.top!=-1)//最后从栈顶到栈底        &#123;            x2=output_double(&amp;data_1);            x1=output_double(&amp;data_1);            sum=Math(x1,x2,output_char(&amp;data_2));            input_double(&amp;data_1,sum);        &#125;        printf(&quot;%lf&quot;, data_1.a[0]);                return 0;    &#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lo</title>
      <link href="2021/010111.html"/>
      <url>2021/010111.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-数列排序"><a href="#1-数列排序" class="headerlink" title="1.数列排序"></a>1.数列排序</h2><h3 id="题目概述："><a href="#题目概述：" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>给定一个长度为n的数列，将这个数列按从小到大的顺序排列。</p><p>1&lt;=n&lt;=200</p><p>输入格式</p><p>　　<br>第一行为一个整数n。　</p><p>第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p><p>输出格式<br>　　<br>输出一行，按从小到大的顺序输出排序后的数列。</p><p>样例输入</p><p>5</p><p>8 3 6 4 9</p><p>样例输出</p><p>3 4 6 8 9</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>基本思想：：参见排序算法专栏</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>clock_t start<span class="token punctuation">,</span> finish<span class="token punctuation">;</span><span class="token keyword">double</span> Total_time<span class="token punctuation">;</span>start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机数组</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right <span class="token punctuation">)</span><span class="token punctuation">;</span>start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计时开始</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>finish <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计时结束</span>Total_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>finish <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f seconds\n"</span><span class="token punctuation">,</span> Total_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//快速排序</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> base<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>    base <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//取最左边的数为基准数</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> base <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//基准数归位</span>    arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归左边</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归右边</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h4><p>基本思想：：参见排序算法专栏</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>v<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>clock_t start<span class="token punctuation">,</span> finish<span class="token punctuation">;</span><span class="token keyword">double</span> Total_time<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成随机数组</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始记时</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               v<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>               a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//冒泡排序</span>    finish <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计时结束；</span>Total_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>finish <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f seconds\n"</span><span class="token punctuation">,</span> Total_time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h2 id="2-十六进制转十进制"><a href="#2-十六进制转十进制" class="headerlink" title="2.十六进制转十进制"></a>2.十六进制转十进制</h2><h3 id="题目概述：-1"><a href="#题目概述：-1" class="headerlink" title="题目概述："></a>题目概述：</h3><p>问题描述</p><p>　　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。</p><p>　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p><p>样例输入</p><p>FFFF</p><p>样例输出</p><p>65535</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         sum<span class="token operator">*</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>        sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'A'</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'F'</span><span class="token punctuation">)</span>        sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> title </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
